Performance Optimization
    Identified Bottlenecks
    - N+1 Queries:
        The initial implementation fetched all products and then queried the database for each product's total sales, resulting in multiple queries.
        Solution: Replaced with a single query using JOIN and GROUP BY.
    - Slow Query Execution:
        The query to calculate total sales was slow for large datasets.
        Solution: Added an index on the product_id column in the orders table.
    - High Database Load:
        Frequent queries for the same data increased database load.
        Solution: Implemented Redis caching to store and serve frequently accessed data.
    
    Optimization Strategies
    - Database Optimization:
        Added an index on the product_id column in the orders table.
        Optimized the query to fetch top-selling products using JOIN and GROUP BY.
    - Caching:
        Used Redis to cache the results of the top-selling products query.
        Set a TTL (time-to-live) of 60 seconds for the cache.
    - Denormalization:
        Considered creating a product_sales table to precompute total sales for each product (optional).
    
    Performance Report
    - Before Optimization
        Response Time: ~8 seconds for 100 products and 10,000 orders.
        Query Count: 101 queries (1 for products + 100 for orders).
    - After Optimization
        Response Time: ~150ms (with Redis caching).
        Query Count: 1 query (optimized query with JOIN and GROUP BY).
    - Tools Used
        TypeORM Query Logging: Identified N+1 queries.
        EXPLAIN: Analyzed query execution plans.
        Redis: Implemented caching for frequently accessed data.

Testing Instructions
    Run the Application
        Build the application: docker-compose build
        Start the application: docker-compose up -d
        Run seeder: docker-compose exec app npm run seed
        Access the API at: http://localhost:3000/analytics/top-products



